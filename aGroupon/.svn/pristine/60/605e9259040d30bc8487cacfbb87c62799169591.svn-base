#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.269
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace aGrouponClasses.Models
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="AGroupon")]
	public partial class aGrouponModelsDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InserttCategory(tCategory instance);
    partial void UpdatetCategory(tCategory instance);
    partial void DeletetCategory(tCategory instance);
    partial void InserttCategoryType(tCategoryType instance);
    partial void UpdatetCategoryType(tCategoryType instance);
    partial void DeletetCategoryType(tCategoryType instance);
    partial void InserttGroup(tGroup instance);
    partial void UpdatetGroup(tGroup instance);
    partial void DeletetGroup(tGroup instance);
    partial void InserttRole(tRole instance);
    partial void UpdatetRole(tRole instance);
    partial void DeletetRole(tRole instance);
    partial void InserttDealCity(tDealCity instance);
    partial void UpdatetDealCity(tDealCity instance);
    partial void DeletetDealCity(tDealCity instance);
    partial void InserttUser(tUser instance);
    partial void UpdatetUser(tUser instance);
    partial void DeletetUser(tUser instance);
    partial void InserttDeal(tDeal instance);
    partial void UpdatetDeal(tDeal instance);
    partial void DeletetDeal(tDeal instance);
    partial void InserttCoupon(tCoupon instance);
    partial void UpdatetCoupon(tCoupon instance);
    partial void DeletetCoupon(tCoupon instance);
    partial void InserttPaymentMessage(tPaymentMessage instance);
    partial void UpdatetPaymentMessage(tPaymentMessage instance);
    partial void DeletetPaymentMessage(tPaymentMessage instance);
    partial void InserttOrder(tOrder instance);
    partial void UpdatetOrder(tOrder instance);
    partial void DeletetOrder(tOrder instance);
    #endregion
		
		public aGrouponModelsDataContext() : 
				base(global::aGrouponClasses.Properties.Settings.Default.AGrouponConnectionString1, mappingSource)
		{
			OnCreated();
		}
		
		public aGrouponModelsDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public aGrouponModelsDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public aGrouponModelsDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public aGrouponModelsDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<tCategory> tCategories
		{
			get
			{
				return this.GetTable<tCategory>();
			}
		}
		
		public System.Data.Linq.Table<tCategoryType> tCategoryTypes
		{
			get
			{
				return this.GetTable<tCategoryType>();
			}
		}
		
		public System.Data.Linq.Table<tGroup> tGroups
		{
			get
			{
				return this.GetTable<tGroup>();
			}
		}
		
		public System.Data.Linq.Table<tRole> tRoles
		{
			get
			{
				return this.GetTable<tRole>();
			}
		}
		
		public System.Data.Linq.Table<tDealCity> tDealCities
		{
			get
			{
				return this.GetTable<tDealCity>();
			}
		}
		
		public System.Data.Linq.Table<tUser> tUsers
		{
			get
			{
				return this.GetTable<tUser>();
			}
		}
		
		public System.Data.Linq.Table<tDeal> tDeals
		{
			get
			{
				return this.GetTable<tDeal>();
			}
		}
		
		public System.Data.Linq.Table<tCoupon> tCoupons
		{
			get
			{
				return this.GetTable<tCoupon>();
			}
		}
		
		public System.Data.Linq.Table<tPaymentMessage> tPaymentMessages
		{
			get
			{
				return this.GetTable<tPaymentMessage>();
			}
		}
		
		public System.Data.Linq.Table<tOrder> tOrders
		{
			get
			{
				return this.GetTable<tOrder>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.tCategory")]
	public partial class tCategory : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _IDCategory;
		
		private int _IDCategoryType;
		
		private int _IDGroup;
		
		private string _Name;
		
		private string _Slug;
		
		private string _InitialLetter;
		
		private bool _DisplayFlag;
		
		private int _Sort;
		
		private EntitySet<tDealCity> _tDealCities;
		
		private EntitySet<tUser> _tUsers;
		
		private EntitySet<tUser> _tUsers1;
		
		private EntitySet<tDeal> _tDeals;
		
		private EntityRef<tCategoryType> _tCategoryType;
		
		private EntityRef<tGroup> _tGroup;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDCategoryChanging(int value);
    partial void OnIDCategoryChanged();
    partial void OnIDCategoryTypeChanging(int value);
    partial void OnIDCategoryTypeChanged();
    partial void OnIDGroupChanging(int value);
    partial void OnIDGroupChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnSlugChanging(string value);
    partial void OnSlugChanged();
    partial void OnInitialLetterChanging(string value);
    partial void OnInitialLetterChanged();
    partial void OnDisplayFlagChanging(bool value);
    partial void OnDisplayFlagChanged();
    partial void OnSortChanging(int value);
    partial void OnSortChanged();
    #endregion
		
		public tCategory()
		{
			this._tDealCities = new EntitySet<tDealCity>(new Action<tDealCity>(this.attach_tDealCities), new Action<tDealCity>(this.detach_tDealCities));
			this._tUsers = new EntitySet<tUser>(new Action<tUser>(this.attach_tUsers), new Action<tUser>(this.detach_tUsers));
			this._tUsers1 = new EntitySet<tUser>(new Action<tUser>(this.attach_tUsers1), new Action<tUser>(this.detach_tUsers1));
			this._tDeals = new EntitySet<tDeal>(new Action<tDeal>(this.attach_tDeals), new Action<tDeal>(this.detach_tDeals));
			this._tCategoryType = default(EntityRef<tCategoryType>);
			this._tGroup = default(EntityRef<tGroup>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDCategory", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int IDCategory
		{
			get
			{
				return this._IDCategory;
			}
			set
			{
				if ((this._IDCategory != value))
				{
					this.OnIDCategoryChanging(value);
					this.SendPropertyChanging();
					this._IDCategory = value;
					this.SendPropertyChanged("IDCategory");
					this.OnIDCategoryChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDCategoryType", DbType="Int NOT NULL")]
		public int IDCategoryType
		{
			get
			{
				return this._IDCategoryType;
			}
			set
			{
				if ((this._IDCategoryType != value))
				{
					if (this._tCategoryType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIDCategoryTypeChanging(value);
					this.SendPropertyChanging();
					this._IDCategoryType = value;
					this.SendPropertyChanged("IDCategoryType");
					this.OnIDCategoryTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDGroup", DbType="Int NOT NULL")]
		public int IDGroup
		{
			get
			{
				return this._IDGroup;
			}
			set
			{
				if ((this._IDGroup != value))
				{
					if (this._tGroup.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIDGroupChanging(value);
					this.SendPropertyChanging();
					this._IDGroup = value;
					this.SendPropertyChanged("IDGroup");
					this.OnIDGroupChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(50)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Slug", DbType="NVarChar(50)")]
		public string Slug
		{
			get
			{
				return this._Slug;
			}
			set
			{
				if ((this._Slug != value))
				{
					this.OnSlugChanging(value);
					this.SendPropertyChanging();
					this._Slug = value;
					this.SendPropertyChanged("Slug");
					this.OnSlugChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_InitialLetter", DbType="NVarChar(1) NOT NULL", CanBeNull=false)]
		public string InitialLetter
		{
			get
			{
				return this._InitialLetter;
			}
			set
			{
				if ((this._InitialLetter != value))
				{
					this.OnInitialLetterChanging(value);
					this.SendPropertyChanging();
					this._InitialLetter = value;
					this.SendPropertyChanged("InitialLetter");
					this.OnInitialLetterChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DisplayFlag", DbType="Bit NOT NULL")]
		public bool DisplayFlag
		{
			get
			{
				return this._DisplayFlag;
			}
			set
			{
				if ((this._DisplayFlag != value))
				{
					this.OnDisplayFlagChanging(value);
					this.SendPropertyChanging();
					this._DisplayFlag = value;
					this.SendPropertyChanged("DisplayFlag");
					this.OnDisplayFlagChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Sort", DbType="Int NOT NULL")]
		public int Sort
		{
			get
			{
				return this._Sort;
			}
			set
			{
				if ((this._Sort != value))
				{
					this.OnSortChanging(value);
					this.SendPropertyChanging();
					this._Sort = value;
					this.SendPropertyChanged("Sort");
					this.OnSortChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tCategory_tDealCity", Storage="_tDealCities", ThisKey="IDCategory", OtherKey="IDCity")]
		public EntitySet<tDealCity> tDealCities
		{
			get
			{
				return this._tDealCities;
			}
			set
			{
				this._tDealCities.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tCategory_tUser", Storage="_tUsers", ThisKey="IDCategory", OtherKey="IDCity")]
		public EntitySet<tUser> tUsers
		{
			get
			{
				return this._tUsers;
			}
			set
			{
				this._tUsers.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tCategory_tUser1", Storage="_tUsers1", ThisKey="IDCategory", OtherKey="IDPartnerCategory")]
		public EntitySet<tUser> tUsers1
		{
			get
			{
				return this._tUsers1;
			}
			set
			{
				this._tUsers1.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tCategory_tDeal", Storage="_tDeals", ThisKey="IDCategory", OtherKey="IDDealCategory")]
		public EntitySet<tDeal> tDeals
		{
			get
			{
				return this._tDeals;
			}
			set
			{
				this._tDeals.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tCategoryType_tCategory", Storage="_tCategoryType", ThisKey="IDCategoryType", OtherKey="IDCategoryType", IsForeignKey=true)]
		public tCategoryType tCategoryType
		{
			get
			{
				return this._tCategoryType.Entity;
			}
			set
			{
				tCategoryType previousValue = this._tCategoryType.Entity;
				if (((previousValue != value) 
							|| (this._tCategoryType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._tCategoryType.Entity = null;
						previousValue.tCategories.Remove(this);
					}
					this._tCategoryType.Entity = value;
					if ((value != null))
					{
						value.tCategories.Add(this);
						this._IDCategoryType = value.IDCategoryType;
					}
					else
					{
						this._IDCategoryType = default(int);
					}
					this.SendPropertyChanged("tCategoryType");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tGroup_tCategory", Storage="_tGroup", ThisKey="IDGroup", OtherKey="IDGroup", IsForeignKey=true)]
		public tGroup tGroup
		{
			get
			{
				return this._tGroup.Entity;
			}
			set
			{
				tGroup previousValue = this._tGroup.Entity;
				if (((previousValue != value) 
							|| (this._tGroup.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._tGroup.Entity = null;
						previousValue.tCategories.Remove(this);
					}
					this._tGroup.Entity = value;
					if ((value != null))
					{
						value.tCategories.Add(this);
						this._IDGroup = value.IDGroup;
					}
					else
					{
						this._IDGroup = default(int);
					}
					this.SendPropertyChanged("tGroup");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_tDealCities(tDealCity entity)
		{
			this.SendPropertyChanging();
			entity.tCategory = this;
		}
		
		private void detach_tDealCities(tDealCity entity)
		{
			this.SendPropertyChanging();
			entity.tCategory = null;
		}
		
		private void attach_tUsers(tUser entity)
		{
			this.SendPropertyChanging();
			entity.tCategory = this;
		}
		
		private void detach_tUsers(tUser entity)
		{
			this.SendPropertyChanging();
			entity.tCategory = null;
		}
		
		private void attach_tUsers1(tUser entity)
		{
			this.SendPropertyChanging();
			entity.tCategory1 = this;
		}
		
		private void detach_tUsers1(tUser entity)
		{
			this.SendPropertyChanging();
			entity.tCategory1 = null;
		}
		
		private void attach_tDeals(tDeal entity)
		{
			this.SendPropertyChanging();
			entity.tCategory = this;
		}
		
		private void detach_tDeals(tDeal entity)
		{
			this.SendPropertyChanging();
			entity.tCategory = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.tCategoryType")]
	public partial class tCategoryType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _IDCategoryType;
		
		private string _Name;
		
		private EntitySet<tCategory> _tCategories;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDCategoryTypeChanging(int value);
    partial void OnIDCategoryTypeChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
		
		public tCategoryType()
		{
			this._tCategories = new EntitySet<tCategory>(new Action<tCategory>(this.attach_tCategories), new Action<tCategory>(this.detach_tCategories));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDCategoryType", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int IDCategoryType
		{
			get
			{
				return this._IDCategoryType;
			}
			set
			{
				if ((this._IDCategoryType != value))
				{
					this.OnIDCategoryTypeChanging(value);
					this.SendPropertyChanging();
					this._IDCategoryType = value;
					this.SendPropertyChanged("IDCategoryType");
					this.OnIDCategoryTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tCategoryType_tCategory", Storage="_tCategories", ThisKey="IDCategoryType", OtherKey="IDCategoryType")]
		public EntitySet<tCategory> tCategories
		{
			get
			{
				return this._tCategories;
			}
			set
			{
				this._tCategories.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_tCategories(tCategory entity)
		{
			this.SendPropertyChanging();
			entity.tCategoryType = this;
		}
		
		private void detach_tCategories(tCategory entity)
		{
			this.SendPropertyChanging();
			entity.tCategoryType = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.tGroup")]
	public partial class tGroup : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _IDGroup;
		
		private string _Name;
		
		private EntitySet<tCategory> _tCategories;
		
		private EntitySet<tDeal> _tDeals;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDGroupChanging(int value);
    partial void OnIDGroupChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
		
		public tGroup()
		{
			this._tCategories = new EntitySet<tCategory>(new Action<tCategory>(this.attach_tCategories), new Action<tCategory>(this.detach_tCategories));
			this._tDeals = new EntitySet<tDeal>(new Action<tDeal>(this.attach_tDeals), new Action<tDeal>(this.detach_tDeals));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDGroup", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int IDGroup
		{
			get
			{
				return this._IDGroup;
			}
			set
			{
				if ((this._IDGroup != value))
				{
					this.OnIDGroupChanging(value);
					this.SendPropertyChanging();
					this._IDGroup = value;
					this.SendPropertyChanged("IDGroup");
					this.OnIDGroupChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tGroup_tCategory", Storage="_tCategories", ThisKey="IDGroup", OtherKey="IDGroup")]
		public EntitySet<tCategory> tCategories
		{
			get
			{
				return this._tCategories;
			}
			set
			{
				this._tCategories.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tGroup_tDeal", Storage="_tDeals", ThisKey="IDGroup", OtherKey="IDGroup")]
		public EntitySet<tDeal> tDeals
		{
			get
			{
				return this._tDeals;
			}
			set
			{
				this._tDeals.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_tCategories(tCategory entity)
		{
			this.SendPropertyChanging();
			entity.tGroup = this;
		}
		
		private void detach_tCategories(tCategory entity)
		{
			this.SendPropertyChanging();
			entity.tGroup = null;
		}
		
		private void attach_tDeals(tDeal entity)
		{
			this.SendPropertyChanging();
			entity.tGroup = this;
		}
		
		private void detach_tDeals(tDeal entity)
		{
			this.SendPropertyChanging();
			entity.tGroup = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.tRole")]
	public partial class tRole : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _IDRole;
		
		private string _Name;
		
		private EntitySet<tUser> _tUsers;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDRoleChanging(int value);
    partial void OnIDRoleChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
		
		public tRole()
		{
			this._tUsers = new EntitySet<tUser>(new Action<tUser>(this.attach_tUsers), new Action<tUser>(this.detach_tUsers));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDRole", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int IDRole
		{
			get
			{
				return this._IDRole;
			}
			set
			{
				if ((this._IDRole != value))
				{
					this.OnIDRoleChanging(value);
					this.SendPropertyChanging();
					this._IDRole = value;
					this.SendPropertyChanged("IDRole");
					this.OnIDRoleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(50)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tRole_tUser", Storage="_tUsers", ThisKey="IDRole", OtherKey="IDRole")]
		public EntitySet<tUser> tUsers
		{
			get
			{
				return this._tUsers;
			}
			set
			{
				this._tUsers.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_tUsers(tUser entity)
		{
			this.SendPropertyChanging();
			entity.tRole = this;
		}
		
		private void detach_tUsers(tUser entity)
		{
			this.SendPropertyChanging();
			entity.tRole = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.tDealCity")]
	public partial class tDealCity : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _IDDeal;
		
		private int _IDCity;
		
		private EntityRef<tCategory> _tCategory;
		
		private EntityRef<tDeal> _tDeal;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDDealChanging(int value);
    partial void OnIDDealChanged();
    partial void OnIDCityChanging(int value);
    partial void OnIDCityChanged();
    #endregion
		
		public tDealCity()
		{
			this._tCategory = default(EntityRef<tCategory>);
			this._tDeal = default(EntityRef<tDeal>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDDeal", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int IDDeal
		{
			get
			{
				return this._IDDeal;
			}
			set
			{
				if ((this._IDDeal != value))
				{
					if (this._tDeal.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIDDealChanging(value);
					this.SendPropertyChanging();
					this._IDDeal = value;
					this.SendPropertyChanged("IDDeal");
					this.OnIDDealChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDCity", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int IDCity
		{
			get
			{
				return this._IDCity;
			}
			set
			{
				if ((this._IDCity != value))
				{
					if (this._tCategory.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIDCityChanging(value);
					this.SendPropertyChanging();
					this._IDCity = value;
					this.SendPropertyChanged("IDCity");
					this.OnIDCityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tCategory_tDealCity", Storage="_tCategory", ThisKey="IDCity", OtherKey="IDCategory", IsForeignKey=true)]
		public tCategory tCategory
		{
			get
			{
				return this._tCategory.Entity;
			}
			set
			{
				tCategory previousValue = this._tCategory.Entity;
				if (((previousValue != value) 
							|| (this._tCategory.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._tCategory.Entity = null;
						previousValue.tDealCities.Remove(this);
					}
					this._tCategory.Entity = value;
					if ((value != null))
					{
						value.tDealCities.Add(this);
						this._IDCity = value.IDCategory;
					}
					else
					{
						this._IDCity = default(int);
					}
					this.SendPropertyChanged("tCategory");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tDeal_tDealCity", Storage="_tDeal", ThisKey="IDDeal", OtherKey="IDDeal", IsForeignKey=true)]
		public tDeal tDeal
		{
			get
			{
				return this._tDeal.Entity;
			}
			set
			{
				tDeal previousValue = this._tDeal.Entity;
				if (((previousValue != value) 
							|| (this._tDeal.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._tDeal.Entity = null;
						previousValue.tDealCities.Remove(this);
					}
					this._tDeal.Entity = value;
					if ((value != null))
					{
						value.tDealCities.Add(this);
						this._IDDeal = value.IDDeal;
					}
					else
					{
						this._IDDeal = default(int);
					}
					this.SendPropertyChanged("tDeal");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.tUser")]
	public partial class tUser : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _IDUser;
		
		private int _IDRole;
		
		private int _IDPartnerCategory;
		
		private int _IDCity;
		
		private string _UserName;
		
		private string _Password;
		
		private bool _Approved;
		
		private System.Nullable<System.DateTime> _DateAdded;
		
		private System.Nullable<System.DateTime> _LastLoginDate;
		
		private EntitySet<tDeal> _tDeals;
		
		private EntitySet<tCoupon> _tCoupons;
		
		private EntitySet<tOrder> _tOrders;
		
		private EntityRef<tCategory> _tCategory;
		
		private EntityRef<tCategory> _tCategory1;
		
		private EntityRef<tRole> _tRole;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDUserChanging(int value);
    partial void OnIDUserChanged();
    partial void OnIDRoleChanging(int value);
    partial void OnIDRoleChanged();
    partial void OnIDPartnerCategoryChanging(int value);
    partial void OnIDPartnerCategoryChanged();
    partial void OnIDCityChanging(int value);
    partial void OnIDCityChanged();
    partial void OnUserNameChanging(string value);
    partial void OnUserNameChanged();
    partial void OnPasswordChanging(string value);
    partial void OnPasswordChanged();
    partial void OnApprovedChanging(bool value);
    partial void OnApprovedChanged();
    partial void OnDateAddedChanging(System.Nullable<System.DateTime> value);
    partial void OnDateAddedChanged();
    partial void OnLastLoginDateChanging(System.Nullable<System.DateTime> value);
    partial void OnLastLoginDateChanged();
    #endregion
		
		public tUser()
		{
			this._tDeals = new EntitySet<tDeal>(new Action<tDeal>(this.attach_tDeals), new Action<tDeal>(this.detach_tDeals));
			this._tCoupons = new EntitySet<tCoupon>(new Action<tCoupon>(this.attach_tCoupons), new Action<tCoupon>(this.detach_tCoupons));
			this._tOrders = new EntitySet<tOrder>(new Action<tOrder>(this.attach_tOrders), new Action<tOrder>(this.detach_tOrders));
			this._tCategory = default(EntityRef<tCategory>);
			this._tCategory1 = default(EntityRef<tCategory>);
			this._tRole = default(EntityRef<tRole>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDUser", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int IDUser
		{
			get
			{
				return this._IDUser;
			}
			set
			{
				if ((this._IDUser != value))
				{
					this.OnIDUserChanging(value);
					this.SendPropertyChanging();
					this._IDUser = value;
					this.SendPropertyChanged("IDUser");
					this.OnIDUserChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDRole", DbType="Int NOT NULL")]
		public int IDRole
		{
			get
			{
				return this._IDRole;
			}
			set
			{
				if ((this._IDRole != value))
				{
					if (this._tRole.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIDRoleChanging(value);
					this.SendPropertyChanging();
					this._IDRole = value;
					this.SendPropertyChanged("IDRole");
					this.OnIDRoleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDPartnerCategory", DbType="Int NOT NULL")]
		public int IDPartnerCategory
		{
			get
			{
				return this._IDPartnerCategory;
			}
			set
			{
				if ((this._IDPartnerCategory != value))
				{
					if (this._tCategory1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIDPartnerCategoryChanging(value);
					this.SendPropertyChanging();
					this._IDPartnerCategory = value;
					this.SendPropertyChanged("IDPartnerCategory");
					this.OnIDPartnerCategoryChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDCity", DbType="Int NOT NULL")]
		public int IDCity
		{
			get
			{
				return this._IDCity;
			}
			set
			{
				if ((this._IDCity != value))
				{
					if (this._tCategory.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIDCityChanging(value);
					this.SendPropertyChanging();
					this._IDCity = value;
					this.SendPropertyChanged("IDCity");
					this.OnIDCityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserName", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string UserName
		{
			get
			{
				return this._UserName;
			}
			set
			{
				if ((this._UserName != value))
				{
					this.OnUserNameChanging(value);
					this.SendPropertyChanging();
					this._UserName = value;
					this.SendPropertyChanged("UserName");
					this.OnUserNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Password", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Password
		{
			get
			{
				return this._Password;
			}
			set
			{
				if ((this._Password != value))
				{
					this.OnPasswordChanging(value);
					this.SendPropertyChanging();
					this._Password = value;
					this.SendPropertyChanged("Password");
					this.OnPasswordChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Approved", DbType="Bit NOT NULL")]
		public bool Approved
		{
			get
			{
				return this._Approved;
			}
			set
			{
				if ((this._Approved != value))
				{
					this.OnApprovedChanging(value);
					this.SendPropertyChanging();
					this._Approved = value;
					this.SendPropertyChanged("Approved");
					this.OnApprovedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateAdded", DbType="DateTime")]
		public System.Nullable<System.DateTime> DateAdded
		{
			get
			{
				return this._DateAdded;
			}
			set
			{
				if ((this._DateAdded != value))
				{
					this.OnDateAddedChanging(value);
					this.SendPropertyChanging();
					this._DateAdded = value;
					this.SendPropertyChanged("DateAdded");
					this.OnDateAddedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastLoginDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> LastLoginDate
		{
			get
			{
				return this._LastLoginDate;
			}
			set
			{
				if ((this._LastLoginDate != value))
				{
					this.OnLastLoginDateChanging(value);
					this.SendPropertyChanging();
					this._LastLoginDate = value;
					this.SendPropertyChanged("LastLoginDate");
					this.OnLastLoginDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tUser_tDeal", Storage="_tDeals", ThisKey="IDUser", OtherKey="IDPartner")]
		public EntitySet<tDeal> tDeals
		{
			get
			{
				return this._tDeals;
			}
			set
			{
				this._tDeals.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tUser_tCoupon", Storage="_tCoupons", ThisKey="IDUser", OtherKey="IDPartner")]
		public EntitySet<tCoupon> tCoupons
		{
			get
			{
				return this._tCoupons;
			}
			set
			{
				this._tCoupons.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tUser_tOrder", Storage="_tOrders", ThisKey="IDUser", OtherKey="IDUserBought")]
		public EntitySet<tOrder> tOrders
		{
			get
			{
				return this._tOrders;
			}
			set
			{
				this._tOrders.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tCategory_tUser", Storage="_tCategory", ThisKey="IDCity", OtherKey="IDCategory", IsForeignKey=true)]
		public tCategory tCategory
		{
			get
			{
				return this._tCategory.Entity;
			}
			set
			{
				tCategory previousValue = this._tCategory.Entity;
				if (((previousValue != value) 
							|| (this._tCategory.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._tCategory.Entity = null;
						previousValue.tUsers.Remove(this);
					}
					this._tCategory.Entity = value;
					if ((value != null))
					{
						value.tUsers.Add(this);
						this._IDCity = value.IDCategory;
					}
					else
					{
						this._IDCity = default(int);
					}
					this.SendPropertyChanged("tCategory");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tCategory_tUser1", Storage="_tCategory1", ThisKey="IDPartnerCategory", OtherKey="IDCategory", IsForeignKey=true)]
		public tCategory tCategory1
		{
			get
			{
				return this._tCategory1.Entity;
			}
			set
			{
				tCategory previousValue = this._tCategory1.Entity;
				if (((previousValue != value) 
							|| (this._tCategory1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._tCategory1.Entity = null;
						previousValue.tUsers1.Remove(this);
					}
					this._tCategory1.Entity = value;
					if ((value != null))
					{
						value.tUsers1.Add(this);
						this._IDPartnerCategory = value.IDCategory;
					}
					else
					{
						this._IDPartnerCategory = default(int);
					}
					this.SendPropertyChanged("tCategory1");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tRole_tUser", Storage="_tRole", ThisKey="IDRole", OtherKey="IDRole", IsForeignKey=true)]
		public tRole tRole
		{
			get
			{
				return this._tRole.Entity;
			}
			set
			{
				tRole previousValue = this._tRole.Entity;
				if (((previousValue != value) 
							|| (this._tRole.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._tRole.Entity = null;
						previousValue.tUsers.Remove(this);
					}
					this._tRole.Entity = value;
					if ((value != null))
					{
						value.tUsers.Add(this);
						this._IDRole = value.IDRole;
					}
					else
					{
						this._IDRole = default(int);
					}
					this.SendPropertyChanged("tRole");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_tDeals(tDeal entity)
		{
			this.SendPropertyChanging();
			entity.tUser = this;
		}
		
		private void detach_tDeals(tDeal entity)
		{
			this.SendPropertyChanging();
			entity.tUser = null;
		}
		
		private void attach_tCoupons(tCoupon entity)
		{
			this.SendPropertyChanging();
			entity.tUser = this;
		}
		
		private void detach_tCoupons(tCoupon entity)
		{
			this.SendPropertyChanging();
			entity.tUser = null;
		}
		
		private void attach_tOrders(tOrder entity)
		{
			this.SendPropertyChanging();
			entity.tUser = this;
		}
		
		private void detach_tOrders(tOrder entity)
		{
			this.SendPropertyChanging();
			entity.tUser = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.tDeal")]
	public partial class tDeal : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _IDDeal;
		
		private int _IDDealType;
		
		private int _IDGroup;
		
		private int _IDDealCategory;
		
		private int _IDPartner;
		
		private string _DealTitle;
		
		private decimal _MarketPrice;
		
		private decimal _DealPrice;
		
		private int _VirtualBuyers;
		
		private int _LimitLower;
		
		private int _LimitUpper;
		
		private int _LimitUser;
		
		private int _QuantityMinimum;
		
		private System.DateTime _DateStarting;
		
		private System.DateTime _DateEnding;
		
		private System.DateTime _DateCouponExpiry;
		
		private System.DateTime _DateAdded;
		
		private bool _AllowRefundFlag;
		
		private string _Introduction;
		
		private string _Tips;
		
		private int _SortOrder;
		
		private int _BiggestCardUse;
		
		private decimal _InvitationRebate;
		
		private string _PrductName;
		
		private string _ProductOptions;
		
		private string _ProductImage;
		
		private string _ProductImage1;
		
		private string _ProductImage2;
		
		private string _FlvVideoFile;
		
		private string _Detail;
		
		private string _UserReviews;
		
		private int _ModeOfDelivery;
		
		private decimal _ConsumerRebates;
		
		private string _HelperString;
		
		private EntitySet<tDealCity> _tDealCities;
		
		private EntitySet<tPaymentMessage> _tPaymentMessages;
		
		private EntitySet<tOrder> _tOrders;
		
		private EntityRef<tCategory> _tCategory;
		
		private EntityRef<tGroup> _tGroup;
		
		private EntityRef<tUser> _tUser;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDDealChanging(int value);
    partial void OnIDDealChanged();
    partial void OnIDDealTypeChanging(int value);
    partial void OnIDDealTypeChanged();
    partial void OnIDGroupChanging(int value);
    partial void OnIDGroupChanged();
    partial void OnIDDealCategoryChanging(int value);
    partial void OnIDDealCategoryChanged();
    partial void OnIDPartnerChanging(int value);
    partial void OnIDPartnerChanged();
    partial void OnDealTitleChanging(string value);
    partial void OnDealTitleChanged();
    partial void OnMarketPriceChanging(decimal value);
    partial void OnMarketPriceChanged();
    partial void OnDealPriceChanging(decimal value);
    partial void OnDealPriceChanged();
    partial void OnVirtualBuyersChanging(int value);
    partial void OnVirtualBuyersChanged();
    partial void OnLimitLowerChanging(int value);
    partial void OnLimitLowerChanged();
    partial void OnLimitUpperChanging(int value);
    partial void OnLimitUpperChanged();
    partial void OnLimitUserChanging(int value);
    partial void OnLimitUserChanged();
    partial void OnQuantityMinimumChanging(int value);
    partial void OnQuantityMinimumChanged();
    partial void OnDateStartingChanging(System.DateTime value);
    partial void OnDateStartingChanged();
    partial void OnDateEndingChanging(System.DateTime value);
    partial void OnDateEndingChanged();
    partial void OnDateCouponExpiryChanging(System.DateTime value);
    partial void OnDateCouponExpiryChanged();
    partial void OnDateAddedChanging(System.DateTime value);
    partial void OnDateAddedChanged();
    partial void OnAllowRefundFlagChanging(bool value);
    partial void OnAllowRefundFlagChanged();
    partial void OnIntroductionChanging(string value);
    partial void OnIntroductionChanged();
    partial void OnTipsChanging(string value);
    partial void OnTipsChanged();
    partial void OnSortOrderChanging(int value);
    partial void OnSortOrderChanged();
    partial void OnBiggestCardUseChanging(int value);
    partial void OnBiggestCardUseChanged();
    partial void OnInvitationRebateChanging(decimal value);
    partial void OnInvitationRebateChanged();
    partial void OnPrductNameChanging(string value);
    partial void OnPrductNameChanged();
    partial void OnProductOptionsChanging(string value);
    partial void OnProductOptionsChanged();
    partial void OnProductImageChanging(string value);
    partial void OnProductImageChanged();
    partial void OnProductImage1Changing(string value);
    partial void OnProductImage1Changed();
    partial void OnProductImage2Changing(string value);
    partial void OnProductImage2Changed();
    partial void OnFlvVideoFileChanging(string value);
    partial void OnFlvVideoFileChanged();
    partial void OnDetailChanging(string value);
    partial void OnDetailChanged();
    partial void OnUserReviewsChanging(string value);
    partial void OnUserReviewsChanged();
    partial void OnModeOfDeliveryChanging(int value);
    partial void OnModeOfDeliveryChanged();
    partial void OnConsumerRebatesChanging(decimal value);
    partial void OnConsumerRebatesChanged();
    partial void OnHelperStringChanging(string value);
    partial void OnHelperStringChanged();
    #endregion
		
		public tDeal()
		{
			this._tDealCities = new EntitySet<tDealCity>(new Action<tDealCity>(this.attach_tDealCities), new Action<tDealCity>(this.detach_tDealCities));
			this._tPaymentMessages = new EntitySet<tPaymentMessage>(new Action<tPaymentMessage>(this.attach_tPaymentMessages), new Action<tPaymentMessage>(this.detach_tPaymentMessages));
			this._tOrders = new EntitySet<tOrder>(new Action<tOrder>(this.attach_tOrders), new Action<tOrder>(this.detach_tOrders));
			this._tCategory = default(EntityRef<tCategory>);
			this._tGroup = default(EntityRef<tGroup>);
			this._tUser = default(EntityRef<tUser>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDDeal", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int IDDeal
		{
			get
			{
				return this._IDDeal;
			}
			set
			{
				if ((this._IDDeal != value))
				{
					this.OnIDDealChanging(value);
					this.SendPropertyChanging();
					this._IDDeal = value;
					this.SendPropertyChanged("IDDeal");
					this.OnIDDealChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDDealType", DbType="Int NOT NULL")]
		public int IDDealType
		{
			get
			{
				return this._IDDealType;
			}
			set
			{
				if ((this._IDDealType != value))
				{
					this.OnIDDealTypeChanging(value);
					this.SendPropertyChanging();
					this._IDDealType = value;
					this.SendPropertyChanged("IDDealType");
					this.OnIDDealTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDGroup", DbType="Int NOT NULL")]
		public int IDGroup
		{
			get
			{
				return this._IDGroup;
			}
			set
			{
				if ((this._IDGroup != value))
				{
					if (this._tGroup.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIDGroupChanging(value);
					this.SendPropertyChanging();
					this._IDGroup = value;
					this.SendPropertyChanged("IDGroup");
					this.OnIDGroupChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDDealCategory", DbType="Int NOT NULL")]
		public int IDDealCategory
		{
			get
			{
				return this._IDDealCategory;
			}
			set
			{
				if ((this._IDDealCategory != value))
				{
					if (this._tCategory.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIDDealCategoryChanging(value);
					this.SendPropertyChanging();
					this._IDDealCategory = value;
					this.SendPropertyChanged("IDDealCategory");
					this.OnIDDealCategoryChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDPartner", DbType="Int NOT NULL")]
		public int IDPartner
		{
			get
			{
				return this._IDPartner;
			}
			set
			{
				if ((this._IDPartner != value))
				{
					if (this._tUser.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIDPartnerChanging(value);
					this.SendPropertyChanging();
					this._IDPartner = value;
					this.SendPropertyChanged("IDPartner");
					this.OnIDPartnerChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DealTitle", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string DealTitle
		{
			get
			{
				return this._DealTitle;
			}
			set
			{
				if ((this._DealTitle != value))
				{
					this.OnDealTitleChanging(value);
					this.SendPropertyChanging();
					this._DealTitle = value;
					this.SendPropertyChanged("DealTitle");
					this.OnDealTitleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MarketPrice", DbType="Money NOT NULL")]
		public decimal MarketPrice
		{
			get
			{
				return this._MarketPrice;
			}
			set
			{
				if ((this._MarketPrice != value))
				{
					this.OnMarketPriceChanging(value);
					this.SendPropertyChanging();
					this._MarketPrice = value;
					this.SendPropertyChanged("MarketPrice");
					this.OnMarketPriceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DealPrice", DbType="Money NOT NULL")]
		public decimal DealPrice
		{
			get
			{
				return this._DealPrice;
			}
			set
			{
				if ((this._DealPrice != value))
				{
					this.OnDealPriceChanging(value);
					this.SendPropertyChanging();
					this._DealPrice = value;
					this.SendPropertyChanged("DealPrice");
					this.OnDealPriceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_VirtualBuyers", DbType="Int NOT NULL")]
		public int VirtualBuyers
		{
			get
			{
				return this._VirtualBuyers;
			}
			set
			{
				if ((this._VirtualBuyers != value))
				{
					this.OnVirtualBuyersChanging(value);
					this.SendPropertyChanging();
					this._VirtualBuyers = value;
					this.SendPropertyChanged("VirtualBuyers");
					this.OnVirtualBuyersChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LimitLower", DbType="Int NOT NULL")]
		public int LimitLower
		{
			get
			{
				return this._LimitLower;
			}
			set
			{
				if ((this._LimitLower != value))
				{
					this.OnLimitLowerChanging(value);
					this.SendPropertyChanging();
					this._LimitLower = value;
					this.SendPropertyChanged("LimitLower");
					this.OnLimitLowerChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LimitUpper", DbType="Int NOT NULL")]
		public int LimitUpper
		{
			get
			{
				return this._LimitUpper;
			}
			set
			{
				if ((this._LimitUpper != value))
				{
					this.OnLimitUpperChanging(value);
					this.SendPropertyChanging();
					this._LimitUpper = value;
					this.SendPropertyChanged("LimitUpper");
					this.OnLimitUpperChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LimitUser", DbType="Int NOT NULL")]
		public int LimitUser
		{
			get
			{
				return this._LimitUser;
			}
			set
			{
				if ((this._LimitUser != value))
				{
					this.OnLimitUserChanging(value);
					this.SendPropertyChanging();
					this._LimitUser = value;
					this.SendPropertyChanged("LimitUser");
					this.OnLimitUserChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_QuantityMinimum", DbType="Int NOT NULL")]
		public int QuantityMinimum
		{
			get
			{
				return this._QuantityMinimum;
			}
			set
			{
				if ((this._QuantityMinimum != value))
				{
					this.OnQuantityMinimumChanging(value);
					this.SendPropertyChanging();
					this._QuantityMinimum = value;
					this.SendPropertyChanged("QuantityMinimum");
					this.OnQuantityMinimumChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateStarting", DbType="DateTime NOT NULL")]
		public System.DateTime DateStarting
		{
			get
			{
				return this._DateStarting;
			}
			set
			{
				if ((this._DateStarting != value))
				{
					this.OnDateStartingChanging(value);
					this.SendPropertyChanging();
					this._DateStarting = value;
					this.SendPropertyChanged("DateStarting");
					this.OnDateStartingChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateEnding", DbType="DateTime NOT NULL")]
		public System.DateTime DateEnding
		{
			get
			{
				return this._DateEnding;
			}
			set
			{
				if ((this._DateEnding != value))
				{
					this.OnDateEndingChanging(value);
					this.SendPropertyChanging();
					this._DateEnding = value;
					this.SendPropertyChanged("DateEnding");
					this.OnDateEndingChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateCouponExpiry", DbType="DateTime NOT NULL")]
		public System.DateTime DateCouponExpiry
		{
			get
			{
				return this._DateCouponExpiry;
			}
			set
			{
				if ((this._DateCouponExpiry != value))
				{
					this.OnDateCouponExpiryChanging(value);
					this.SendPropertyChanging();
					this._DateCouponExpiry = value;
					this.SendPropertyChanged("DateCouponExpiry");
					this.OnDateCouponExpiryChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateAdded", DbType="DateTime NOT NULL")]
		public System.DateTime DateAdded
		{
			get
			{
				return this._DateAdded;
			}
			set
			{
				if ((this._DateAdded != value))
				{
					this.OnDateAddedChanging(value);
					this.SendPropertyChanging();
					this._DateAdded = value;
					this.SendPropertyChanged("DateAdded");
					this.OnDateAddedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AllowRefundFlag", DbType="Bit NOT NULL")]
		public bool AllowRefundFlag
		{
			get
			{
				return this._AllowRefundFlag;
			}
			set
			{
				if ((this._AllowRefundFlag != value))
				{
					this.OnAllowRefundFlagChanging(value);
					this.SendPropertyChanging();
					this._AllowRefundFlag = value;
					this.SendPropertyChanged("AllowRefundFlag");
					this.OnAllowRefundFlagChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Introduction", DbType="NVarChar(500) NOT NULL", CanBeNull=false)]
		public string Introduction
		{
			get
			{
				return this._Introduction;
			}
			set
			{
				if ((this._Introduction != value))
				{
					this.OnIntroductionChanging(value);
					this.SendPropertyChanging();
					this._Introduction = value;
					this.SendPropertyChanged("Introduction");
					this.OnIntroductionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Tips", DbType="NVarChar(500)")]
		public string Tips
		{
			get
			{
				return this._Tips;
			}
			set
			{
				if ((this._Tips != value))
				{
					this.OnTipsChanging(value);
					this.SendPropertyChanging();
					this._Tips = value;
					this.SendPropertyChanged("Tips");
					this.OnTipsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SortOrder", DbType="Int NOT NULL")]
		public int SortOrder
		{
			get
			{
				return this._SortOrder;
			}
			set
			{
				if ((this._SortOrder != value))
				{
					this.OnSortOrderChanging(value);
					this.SendPropertyChanging();
					this._SortOrder = value;
					this.SendPropertyChanged("SortOrder");
					this.OnSortOrderChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BiggestCardUse", DbType="Int NOT NULL")]
		public int BiggestCardUse
		{
			get
			{
				return this._BiggestCardUse;
			}
			set
			{
				if ((this._BiggestCardUse != value))
				{
					this.OnBiggestCardUseChanging(value);
					this.SendPropertyChanging();
					this._BiggestCardUse = value;
					this.SendPropertyChanged("BiggestCardUse");
					this.OnBiggestCardUseChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_InvitationRebate", DbType="Money NOT NULL")]
		public decimal InvitationRebate
		{
			get
			{
				return this._InvitationRebate;
			}
			set
			{
				if ((this._InvitationRebate != value))
				{
					this.OnInvitationRebateChanging(value);
					this.SendPropertyChanging();
					this._InvitationRebate = value;
					this.SendPropertyChanged("InvitationRebate");
					this.OnInvitationRebateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PrductName", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string PrductName
		{
			get
			{
				return this._PrductName;
			}
			set
			{
				if ((this._PrductName != value))
				{
					this.OnPrductNameChanging(value);
					this.SendPropertyChanging();
					this._PrductName = value;
					this.SendPropertyChanged("PrductName");
					this.OnPrductNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProductOptions", DbType="NVarChar(200)")]
		public string ProductOptions
		{
			get
			{
				return this._ProductOptions;
			}
			set
			{
				if ((this._ProductOptions != value))
				{
					this.OnProductOptionsChanging(value);
					this.SendPropertyChanging();
					this._ProductOptions = value;
					this.SendPropertyChanged("ProductOptions");
					this.OnProductOptionsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProductImage", DbType="NVarChar(300)")]
		public string ProductImage
		{
			get
			{
				return this._ProductImage;
			}
			set
			{
				if ((this._ProductImage != value))
				{
					this.OnProductImageChanging(value);
					this.SendPropertyChanging();
					this._ProductImage = value;
					this.SendPropertyChanged("ProductImage");
					this.OnProductImageChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProductImage1", DbType="NVarChar(300)")]
		public string ProductImage1
		{
			get
			{
				return this._ProductImage1;
			}
			set
			{
				if ((this._ProductImage1 != value))
				{
					this.OnProductImage1Changing(value);
					this.SendPropertyChanging();
					this._ProductImage1 = value;
					this.SendPropertyChanged("ProductImage1");
					this.OnProductImage1Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProductImage2", DbType="NVarChar(300)")]
		public string ProductImage2
		{
			get
			{
				return this._ProductImage2;
			}
			set
			{
				if ((this._ProductImage2 != value))
				{
					this.OnProductImage2Changing(value);
					this.SendPropertyChanging();
					this._ProductImage2 = value;
					this.SendPropertyChanged("ProductImage2");
					this.OnProductImage2Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FlvVideoFile", DbType="NVarChar(200)")]
		public string FlvVideoFile
		{
			get
			{
				return this._FlvVideoFile;
			}
			set
			{
				if ((this._FlvVideoFile != value))
				{
					this.OnFlvVideoFileChanging(value);
					this.SendPropertyChanging();
					this._FlvVideoFile = value;
					this.SendPropertyChanged("FlvVideoFile");
					this.OnFlvVideoFileChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Detail", DbType="NVarChar(200)")]
		public string Detail
		{
			get
			{
				return this._Detail;
			}
			set
			{
				if ((this._Detail != value))
				{
					this.OnDetailChanging(value);
					this.SendPropertyChanging();
					this._Detail = value;
					this.SendPropertyChanged("Detail");
					this.OnDetailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserReviews", DbType="NVarChar(MAX)")]
		public string UserReviews
		{
			get
			{
				return this._UserReviews;
			}
			set
			{
				if ((this._UserReviews != value))
				{
					this.OnUserReviewsChanging(value);
					this.SendPropertyChanging();
					this._UserReviews = value;
					this.SendPropertyChanged("UserReviews");
					this.OnUserReviewsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModeOfDelivery", DbType="Int NOT NULL")]
		public int ModeOfDelivery
		{
			get
			{
				return this._ModeOfDelivery;
			}
			set
			{
				if ((this._ModeOfDelivery != value))
				{
					this.OnModeOfDeliveryChanging(value);
					this.SendPropertyChanging();
					this._ModeOfDelivery = value;
					this.SendPropertyChanged("ModeOfDelivery");
					this.OnModeOfDeliveryChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ConsumerRebates", DbType="Money NOT NULL")]
		public decimal ConsumerRebates
		{
			get
			{
				return this._ConsumerRebates;
			}
			set
			{
				if ((this._ConsumerRebates != value))
				{
					this.OnConsumerRebatesChanging(value);
					this.SendPropertyChanging();
					this._ConsumerRebates = value;
					this.SendPropertyChanged("ConsumerRebates");
					this.OnConsumerRebatesChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_HelperString", DbType="NVarChar(100)")]
		public string HelperString
		{
			get
			{
				return this._HelperString;
			}
			set
			{
				if ((this._HelperString != value))
				{
					this.OnHelperStringChanging(value);
					this.SendPropertyChanging();
					this._HelperString = value;
					this.SendPropertyChanged("HelperString");
					this.OnHelperStringChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tDeal_tDealCity", Storage="_tDealCities", ThisKey="IDDeal", OtherKey="IDDeal")]
		public EntitySet<tDealCity> tDealCities
		{
			get
			{
				return this._tDealCities;
			}
			set
			{
				this._tDealCities.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tDeal_tPaymentMessage", Storage="_tPaymentMessages", ThisKey="IDDeal", OtherKey="IDDeal")]
		public EntitySet<tPaymentMessage> tPaymentMessages
		{
			get
			{
				return this._tPaymentMessages;
			}
			set
			{
				this._tPaymentMessages.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tDeal_tOrder", Storage="_tOrders", ThisKey="IDDeal", OtherKey="IDDeal")]
		public EntitySet<tOrder> tOrders
		{
			get
			{
				return this._tOrders;
			}
			set
			{
				this._tOrders.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tCategory_tDeal", Storage="_tCategory", ThisKey="IDDealCategory", OtherKey="IDCategory", IsForeignKey=true)]
		public tCategory tCategory
		{
			get
			{
				return this._tCategory.Entity;
			}
			set
			{
				tCategory previousValue = this._tCategory.Entity;
				if (((previousValue != value) 
							|| (this._tCategory.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._tCategory.Entity = null;
						previousValue.tDeals.Remove(this);
					}
					this._tCategory.Entity = value;
					if ((value != null))
					{
						value.tDeals.Add(this);
						this._IDDealCategory = value.IDCategory;
					}
					else
					{
						this._IDDealCategory = default(int);
					}
					this.SendPropertyChanged("tCategory");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tGroup_tDeal", Storage="_tGroup", ThisKey="IDGroup", OtherKey="IDGroup", IsForeignKey=true)]
		public tGroup tGroup
		{
			get
			{
				return this._tGroup.Entity;
			}
			set
			{
				tGroup previousValue = this._tGroup.Entity;
				if (((previousValue != value) 
							|| (this._tGroup.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._tGroup.Entity = null;
						previousValue.tDeals.Remove(this);
					}
					this._tGroup.Entity = value;
					if ((value != null))
					{
						value.tDeals.Add(this);
						this._IDGroup = value.IDGroup;
					}
					else
					{
						this._IDGroup = default(int);
					}
					this.SendPropertyChanged("tGroup");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tUser_tDeal", Storage="_tUser", ThisKey="IDPartner", OtherKey="IDUser", IsForeignKey=true)]
		public tUser tUser
		{
			get
			{
				return this._tUser.Entity;
			}
			set
			{
				tUser previousValue = this._tUser.Entity;
				if (((previousValue != value) 
							|| (this._tUser.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._tUser.Entity = null;
						previousValue.tDeals.Remove(this);
					}
					this._tUser.Entity = value;
					if ((value != null))
					{
						value.tDeals.Add(this);
						this._IDPartner = value.IDUser;
					}
					else
					{
						this._IDPartner = default(int);
					}
					this.SendPropertyChanged("tUser");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_tDealCities(tDealCity entity)
		{
			this.SendPropertyChanging();
			entity.tDeal = this;
		}
		
		private void detach_tDealCities(tDealCity entity)
		{
			this.SendPropertyChanging();
			entity.tDeal = null;
		}
		
		private void attach_tPaymentMessages(tPaymentMessage entity)
		{
			this.SendPropertyChanging();
			entity.tDeal = this;
		}
		
		private void detach_tPaymentMessages(tPaymentMessage entity)
		{
			this.SendPropertyChanging();
			entity.tDeal = null;
		}
		
		private void attach_tOrders(tOrder entity)
		{
			this.SendPropertyChanging();
			entity.tDeal = this;
		}
		
		private void detach_tOrders(tOrder entity)
		{
			this.SendPropertyChanging();
			entity.tDeal = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.tCoupon")]
	public partial class tCoupon : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _IDCoupon;
		
		private int _IDPartner;
		
		private decimal _CouponValue;
		
		private System.DateTime _DateBegin;
		
		private System.DateTime _DateEnd;
		
		private string _CustomCode;
		
		private string _Code;
		
		private System.DateTime _DateAdded;
		
		private int _CouponStatus;
		
		private int _ConsumeStatus;
		
		private EntitySet<tOrder> _tOrders;
		
		private EntityRef<tUser> _tUser;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDCouponChanging(int value);
    partial void OnIDCouponChanged();
    partial void OnIDPartnerChanging(int value);
    partial void OnIDPartnerChanged();
    partial void OnCouponValueChanging(decimal value);
    partial void OnCouponValueChanged();
    partial void OnDateBeginChanging(System.DateTime value);
    partial void OnDateBeginChanged();
    partial void OnDateEndChanging(System.DateTime value);
    partial void OnDateEndChanged();
    partial void OnCustomCodeChanging(string value);
    partial void OnCustomCodeChanged();
    partial void OnCodeChanging(string value);
    partial void OnCodeChanged();
    partial void OnDateAddedChanging(System.DateTime value);
    partial void OnDateAddedChanged();
    partial void OnCouponStatusChanging(int value);
    partial void OnCouponStatusChanged();
    partial void OnConsumeStatusChanging(int value);
    partial void OnConsumeStatusChanged();
    #endregion
		
		public tCoupon()
		{
			this._tOrders = new EntitySet<tOrder>(new Action<tOrder>(this.attach_tOrders), new Action<tOrder>(this.detach_tOrders));
			this._tUser = default(EntityRef<tUser>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDCoupon", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int IDCoupon
		{
			get
			{
				return this._IDCoupon;
			}
			set
			{
				if ((this._IDCoupon != value))
				{
					this.OnIDCouponChanging(value);
					this.SendPropertyChanging();
					this._IDCoupon = value;
					this.SendPropertyChanged("IDCoupon");
					this.OnIDCouponChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDPartner", DbType="Int NOT NULL")]
		public int IDPartner
		{
			get
			{
				return this._IDPartner;
			}
			set
			{
				if ((this._IDPartner != value))
				{
					if (this._tUser.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIDPartnerChanging(value);
					this.SendPropertyChanging();
					this._IDPartner = value;
					this.SendPropertyChanged("IDPartner");
					this.OnIDPartnerChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CouponValue", DbType="Money NOT NULL")]
		public decimal CouponValue
		{
			get
			{
				return this._CouponValue;
			}
			set
			{
				if ((this._CouponValue != value))
				{
					this.OnCouponValueChanging(value);
					this.SendPropertyChanging();
					this._CouponValue = value;
					this.SendPropertyChanged("CouponValue");
					this.OnCouponValueChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateBegin", DbType="DateTime NOT NULL")]
		public System.DateTime DateBegin
		{
			get
			{
				return this._DateBegin;
			}
			set
			{
				if ((this._DateBegin != value))
				{
					this.OnDateBeginChanging(value);
					this.SendPropertyChanging();
					this._DateBegin = value;
					this.SendPropertyChanged("DateBegin");
					this.OnDateBeginChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateEnd", DbType="DateTime NOT NULL")]
		public System.DateTime DateEnd
		{
			get
			{
				return this._DateEnd;
			}
			set
			{
				if ((this._DateEnd != value))
				{
					this.OnDateEndChanging(value);
					this.SendPropertyChanging();
					this._DateEnd = value;
					this.SendPropertyChanged("DateEnd");
					this.OnDateEndChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CustomCode", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string CustomCode
		{
			get
			{
				return this._CustomCode;
			}
			set
			{
				if ((this._CustomCode != value))
				{
					this.OnCustomCodeChanging(value);
					this.SendPropertyChanging();
					this._CustomCode = value;
					this.SendPropertyChanged("CustomCode");
					this.OnCustomCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Code", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Code
		{
			get
			{
				return this._Code;
			}
			set
			{
				if ((this._Code != value))
				{
					this.OnCodeChanging(value);
					this.SendPropertyChanging();
					this._Code = value;
					this.SendPropertyChanged("Code");
					this.OnCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateAdded", DbType="DateTime NOT NULL")]
		public System.DateTime DateAdded
		{
			get
			{
				return this._DateAdded;
			}
			set
			{
				if ((this._DateAdded != value))
				{
					this.OnDateAddedChanging(value);
					this.SendPropertyChanging();
					this._DateAdded = value;
					this.SendPropertyChanged("DateAdded");
					this.OnDateAddedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CouponStatus", DbType="Int NOT NULL")]
		public int CouponStatus
		{
			get
			{
				return this._CouponStatus;
			}
			set
			{
				if ((this._CouponStatus != value))
				{
					this.OnCouponStatusChanging(value);
					this.SendPropertyChanging();
					this._CouponStatus = value;
					this.SendPropertyChanged("CouponStatus");
					this.OnCouponStatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ConsumeStatus", DbType="Int NOT NULL")]
		public int ConsumeStatus
		{
			get
			{
				return this._ConsumeStatus;
			}
			set
			{
				if ((this._ConsumeStatus != value))
				{
					this.OnConsumeStatusChanging(value);
					this.SendPropertyChanging();
					this._ConsumeStatus = value;
					this.SendPropertyChanged("ConsumeStatus");
					this.OnConsumeStatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tCoupon_tOrder", Storage="_tOrders", ThisKey="IDCoupon", OtherKey="IDCoupon")]
		public EntitySet<tOrder> tOrders
		{
			get
			{
				return this._tOrders;
			}
			set
			{
				this._tOrders.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tUser_tCoupon", Storage="_tUser", ThisKey="IDPartner", OtherKey="IDUser", IsForeignKey=true)]
		public tUser tUser
		{
			get
			{
				return this._tUser.Entity;
			}
			set
			{
				tUser previousValue = this._tUser.Entity;
				if (((previousValue != value) 
							|| (this._tUser.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._tUser.Entity = null;
						previousValue.tCoupons.Remove(this);
					}
					this._tUser.Entity = value;
					if ((value != null))
					{
						value.tCoupons.Add(this);
						this._IDPartner = value.IDUser;
					}
					else
					{
						this._IDPartner = default(int);
					}
					this.SendPropertyChanged("tUser");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_tOrders(tOrder entity)
		{
			this.SendPropertyChanging();
			entity.tCoupon = this;
		}
		
		private void detach_tOrders(tOrder entity)
		{
			this.SendPropertyChanging();
			entity.tCoupon = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.tPaymentMessage")]
	public partial class tPaymentMessage : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _IDPaymentMessage;
		
		private int _IDDeal;
		
		private string _SMSCode;
		
		private string _UniqueID;
		
		private bool _Approved;
		
		private System.DateTime _DateAdded;
		
		private int _IDUsed;
		
		private EntityRef<tDeal> _tDeal;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDPaymentMessageChanging(int value);
    partial void OnIDPaymentMessageChanged();
    partial void OnIDDealChanging(int value);
    partial void OnIDDealChanged();
    partial void OnSMSCodeChanging(string value);
    partial void OnSMSCodeChanged();
    partial void OnUniqueIDChanging(string value);
    partial void OnUniqueIDChanged();
    partial void OnApprovedChanging(bool value);
    partial void OnApprovedChanged();
    partial void OnDateAddedChanging(System.DateTime value);
    partial void OnDateAddedChanged();
    partial void OnIDUsedChanging(int value);
    partial void OnIDUsedChanged();
    #endregion
		
		public tPaymentMessage()
		{
			this._tDeal = default(EntityRef<tDeal>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDPaymentMessage", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int IDPaymentMessage
		{
			get
			{
				return this._IDPaymentMessage;
			}
			set
			{
				if ((this._IDPaymentMessage != value))
				{
					this.OnIDPaymentMessageChanging(value);
					this.SendPropertyChanging();
					this._IDPaymentMessage = value;
					this.SendPropertyChanged("IDPaymentMessage");
					this.OnIDPaymentMessageChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDDeal", DbType="Int NOT NULL")]
		public int IDDeal
		{
			get
			{
				return this._IDDeal;
			}
			set
			{
				if ((this._IDDeal != value))
				{
					if (this._tDeal.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIDDealChanging(value);
					this.SendPropertyChanging();
					this._IDDeal = value;
					this.SendPropertyChanged("IDDeal");
					this.OnIDDealChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SMSCode", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string SMSCode
		{
			get
			{
				return this._SMSCode;
			}
			set
			{
				if ((this._SMSCode != value))
				{
					this.OnSMSCodeChanging(value);
					this.SendPropertyChanging();
					this._SMSCode = value;
					this.SendPropertyChanged("SMSCode");
					this.OnSMSCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UniqueID", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string UniqueID
		{
			get
			{
				return this._UniqueID;
			}
			set
			{
				if ((this._UniqueID != value))
				{
					this.OnUniqueIDChanging(value);
					this.SendPropertyChanging();
					this._UniqueID = value;
					this.SendPropertyChanged("UniqueID");
					this.OnUniqueIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Approved", DbType="Bit NOT NULL")]
		public bool Approved
		{
			get
			{
				return this._Approved;
			}
			set
			{
				if ((this._Approved != value))
				{
					this.OnApprovedChanging(value);
					this.SendPropertyChanging();
					this._Approved = value;
					this.SendPropertyChanged("Approved");
					this.OnApprovedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateAdded", DbType="DateTime NOT NULL")]
		public System.DateTime DateAdded
		{
			get
			{
				return this._DateAdded;
			}
			set
			{
				if ((this._DateAdded != value))
				{
					this.OnDateAddedChanging(value);
					this.SendPropertyChanging();
					this._DateAdded = value;
					this.SendPropertyChanged("DateAdded");
					this.OnDateAddedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDUsed", DbType="Int NOT NULL")]
		public int IDUsed
		{
			get
			{
				return this._IDUsed;
			}
			set
			{
				if ((this._IDUsed != value))
				{
					this.OnIDUsedChanging(value);
					this.SendPropertyChanging();
					this._IDUsed = value;
					this.SendPropertyChanged("IDUsed");
					this.OnIDUsedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tDeal_tPaymentMessage", Storage="_tDeal", ThisKey="IDDeal", OtherKey="IDDeal", IsForeignKey=true)]
		public tDeal tDeal
		{
			get
			{
				return this._tDeal.Entity;
			}
			set
			{
				tDeal previousValue = this._tDeal.Entity;
				if (((previousValue != value) 
							|| (this._tDeal.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._tDeal.Entity = null;
						previousValue.tPaymentMessages.Remove(this);
					}
					this._tDeal.Entity = value;
					if ((value != null))
					{
						value.tPaymentMessages.Add(this);
						this._IDDeal = value.IDDeal;
					}
					else
					{
						this._IDDeal = default(int);
					}
					this.SendPropertyChanged("tDeal");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.tOrder")]
	public partial class tOrder : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _IDOrder;
		
		private int _IDDeal;
		
		private int _IDUserBought;
		
		private int _IDCoupon;
		
		private int _Quantity;
		
		private string _Options;
		
		private int _OrderStatus;
		
		private int _PaymentType;
		
		private decimal _AmountPaid;
		
		private string _ReferrerAddress;
		
		private string _MobilePhoneNo;
		
		private string _BuyerNotes;
		
		private string _OrderNotes;
		
		private int _RefundStatus;
		
		private System.Nullable<System.DateTime> _DateAdded;
		
		private EntityRef<tCoupon> _tCoupon;
		
		private EntityRef<tDeal> _tDeal;
		
		private EntityRef<tUser> _tUser;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDOrderChanging(int value);
    partial void OnIDOrderChanged();
    partial void OnIDDealChanging(int value);
    partial void OnIDDealChanged();
    partial void OnIDUserBoughtChanging(int value);
    partial void OnIDUserBoughtChanged();
    partial void OnIDCouponChanging(int value);
    partial void OnIDCouponChanged();
    partial void OnQuantityChanging(int value);
    partial void OnQuantityChanged();
    partial void OnOptionsChanging(string value);
    partial void OnOptionsChanged();
    partial void OnOrderStatusChanging(int value);
    partial void OnOrderStatusChanged();
    partial void OnPaymentTypeChanging(int value);
    partial void OnPaymentTypeChanged();
    partial void OnAmountPaidChanging(decimal value);
    partial void OnAmountPaidChanged();
    partial void OnReferrerAddressChanging(string value);
    partial void OnReferrerAddressChanged();
    partial void OnMobilePhoneNoChanging(string value);
    partial void OnMobilePhoneNoChanged();
    partial void OnBuyerNotesChanging(string value);
    partial void OnBuyerNotesChanged();
    partial void OnOrderNotesChanging(string value);
    partial void OnOrderNotesChanged();
    partial void OnRefundStatusChanging(int value);
    partial void OnRefundStatusChanged();
    partial void OnDateAddedChanging(System.Nullable<System.DateTime> value);
    partial void OnDateAddedChanged();
    #endregion
		
		public tOrder()
		{
			this._tCoupon = default(EntityRef<tCoupon>);
			this._tDeal = default(EntityRef<tDeal>);
			this._tUser = default(EntityRef<tUser>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDOrder", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int IDOrder
		{
			get
			{
				return this._IDOrder;
			}
			set
			{
				if ((this._IDOrder != value))
				{
					this.OnIDOrderChanging(value);
					this.SendPropertyChanging();
					this._IDOrder = value;
					this.SendPropertyChanged("IDOrder");
					this.OnIDOrderChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDDeal", DbType="Int NOT NULL")]
		public int IDDeal
		{
			get
			{
				return this._IDDeal;
			}
			set
			{
				if ((this._IDDeal != value))
				{
					if (this._tDeal.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIDDealChanging(value);
					this.SendPropertyChanging();
					this._IDDeal = value;
					this.SendPropertyChanged("IDDeal");
					this.OnIDDealChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDUserBought", DbType="Int NOT NULL")]
		public int IDUserBought
		{
			get
			{
				return this._IDUserBought;
			}
			set
			{
				if ((this._IDUserBought != value))
				{
					if (this._tUser.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIDUserBoughtChanging(value);
					this.SendPropertyChanging();
					this._IDUserBought = value;
					this.SendPropertyChanged("IDUserBought");
					this.OnIDUserBoughtChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDCoupon", DbType="Int NOT NULL")]
		public int IDCoupon
		{
			get
			{
				return this._IDCoupon;
			}
			set
			{
				if ((this._IDCoupon != value))
				{
					if (this._tCoupon.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIDCouponChanging(value);
					this.SendPropertyChanging();
					this._IDCoupon = value;
					this.SendPropertyChanged("IDCoupon");
					this.OnIDCouponChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Quantity", DbType="Int NOT NULL")]
		public int Quantity
		{
			get
			{
				return this._Quantity;
			}
			set
			{
				if ((this._Quantity != value))
				{
					this.OnQuantityChanging(value);
					this.SendPropertyChanging();
					this._Quantity = value;
					this.SendPropertyChanged("Quantity");
					this.OnQuantityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Options", DbType="NVarChar(200)")]
		public string Options
		{
			get
			{
				return this._Options;
			}
			set
			{
				if ((this._Options != value))
				{
					this.OnOptionsChanging(value);
					this.SendPropertyChanging();
					this._Options = value;
					this.SendPropertyChanged("Options");
					this.OnOptionsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OrderStatus", DbType="Int NOT NULL")]
		public int OrderStatus
		{
			get
			{
				return this._OrderStatus;
			}
			set
			{
				if ((this._OrderStatus != value))
				{
					this.OnOrderStatusChanging(value);
					this.SendPropertyChanging();
					this._OrderStatus = value;
					this.SendPropertyChanged("OrderStatus");
					this.OnOrderStatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PaymentType", DbType="Int NOT NULL")]
		public int PaymentType
		{
			get
			{
				return this._PaymentType;
			}
			set
			{
				if ((this._PaymentType != value))
				{
					this.OnPaymentTypeChanging(value);
					this.SendPropertyChanging();
					this._PaymentType = value;
					this.SendPropertyChanged("PaymentType");
					this.OnPaymentTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AmountPaid", DbType="Money NOT NULL")]
		public decimal AmountPaid
		{
			get
			{
				return this._AmountPaid;
			}
			set
			{
				if ((this._AmountPaid != value))
				{
					this.OnAmountPaidChanging(value);
					this.SendPropertyChanging();
					this._AmountPaid = value;
					this.SendPropertyChanged("AmountPaid");
					this.OnAmountPaidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ReferrerAddress", DbType="NVarChar(200)")]
		public string ReferrerAddress
		{
			get
			{
				return this._ReferrerAddress;
			}
			set
			{
				if ((this._ReferrerAddress != value))
				{
					this.OnReferrerAddressChanging(value);
					this.SendPropertyChanging();
					this._ReferrerAddress = value;
					this.SendPropertyChanged("ReferrerAddress");
					this.OnReferrerAddressChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MobilePhoneNo", DbType="NVarChar(50)")]
		public string MobilePhoneNo
		{
			get
			{
				return this._MobilePhoneNo;
			}
			set
			{
				if ((this._MobilePhoneNo != value))
				{
					this.OnMobilePhoneNoChanging(value);
					this.SendPropertyChanging();
					this._MobilePhoneNo = value;
					this.SendPropertyChanged("MobilePhoneNo");
					this.OnMobilePhoneNoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BuyerNotes", DbType="NVarChar(500)")]
		public string BuyerNotes
		{
			get
			{
				return this._BuyerNotes;
			}
			set
			{
				if ((this._BuyerNotes != value))
				{
					this.OnBuyerNotesChanging(value);
					this.SendPropertyChanging();
					this._BuyerNotes = value;
					this.SendPropertyChanged("BuyerNotes");
					this.OnBuyerNotesChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OrderNotes", DbType="NVarChar(500)")]
		public string OrderNotes
		{
			get
			{
				return this._OrderNotes;
			}
			set
			{
				if ((this._OrderNotes != value))
				{
					this.OnOrderNotesChanging(value);
					this.SendPropertyChanging();
					this._OrderNotes = value;
					this.SendPropertyChanged("OrderNotes");
					this.OnOrderNotesChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RefundStatus", DbType="Int NOT NULL")]
		public int RefundStatus
		{
			get
			{
				return this._RefundStatus;
			}
			set
			{
				if ((this._RefundStatus != value))
				{
					this.OnRefundStatusChanging(value);
					this.SendPropertyChanging();
					this._RefundStatus = value;
					this.SendPropertyChanged("RefundStatus");
					this.OnRefundStatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateAdded", DbType="DateTime")]
		public System.Nullable<System.DateTime> DateAdded
		{
			get
			{
				return this._DateAdded;
			}
			set
			{
				if ((this._DateAdded != value))
				{
					this.OnDateAddedChanging(value);
					this.SendPropertyChanging();
					this._DateAdded = value;
					this.SendPropertyChanged("DateAdded");
					this.OnDateAddedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tCoupon_tOrder", Storage="_tCoupon", ThisKey="IDCoupon", OtherKey="IDCoupon", IsForeignKey=true)]
		public tCoupon tCoupon
		{
			get
			{
				return this._tCoupon.Entity;
			}
			set
			{
				tCoupon previousValue = this._tCoupon.Entity;
				if (((previousValue != value) 
							|| (this._tCoupon.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._tCoupon.Entity = null;
						previousValue.tOrders.Remove(this);
					}
					this._tCoupon.Entity = value;
					if ((value != null))
					{
						value.tOrders.Add(this);
						this._IDCoupon = value.IDCoupon;
					}
					else
					{
						this._IDCoupon = default(int);
					}
					this.SendPropertyChanged("tCoupon");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tDeal_tOrder", Storage="_tDeal", ThisKey="IDDeal", OtherKey="IDDeal", IsForeignKey=true)]
		public tDeal tDeal
		{
			get
			{
				return this._tDeal.Entity;
			}
			set
			{
				tDeal previousValue = this._tDeal.Entity;
				if (((previousValue != value) 
							|| (this._tDeal.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._tDeal.Entity = null;
						previousValue.tOrders.Remove(this);
					}
					this._tDeal.Entity = value;
					if ((value != null))
					{
						value.tOrders.Add(this);
						this._IDDeal = value.IDDeal;
					}
					else
					{
						this._IDDeal = default(int);
					}
					this.SendPropertyChanged("tDeal");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tUser_tOrder", Storage="_tUser", ThisKey="IDUserBought", OtherKey="IDUser", IsForeignKey=true)]
		public tUser tUser
		{
			get
			{
				return this._tUser.Entity;
			}
			set
			{
				tUser previousValue = this._tUser.Entity;
				if (((previousValue != value) 
							|| (this._tUser.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._tUser.Entity = null;
						previousValue.tOrders.Remove(this);
					}
					this._tUser.Entity = value;
					if ((value != null))
					{
						value.tOrders.Add(this);
						this._IDUserBought = value.IDUser;
					}
					else
					{
						this._IDUserBought = default(int);
					}
					this.SendPropertyChanged("tUser");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
